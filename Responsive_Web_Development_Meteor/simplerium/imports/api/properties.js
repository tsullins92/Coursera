import { Meteor } from 'meteor/meteor';
import { Mongo } from 'meteor/mongo';
import { check } from 'meteor/check';
import { Random } from 'meteor/random';

export const Properties = new Mongo.Collection('properties');
 
if (Meteor.isServer) {
  // This code only runs on the server
  // Only publish properties that are public or belong to the current user
  Meteor.publish('properties', function propertiesPublication() {
    return Properties.find({owner: this.userId});
  });
}
 

Meteor.methods({
  'properties.insert'(name, address='', image="") {
    check(name, String);
 		check(address, String);
 		check(image, String);
    // Make sure the user is logged in before inserting a task
    if (! Meteor.userId()) {
      throw new Meteor.Error('not-authorized');
    }
    Properties.insert({
      name: name,
      address: address,
      image: image,
      createdAt: new Date(),
      owner: Meteor.userId(),
      username: Meteor.user().username,
    });
  },
  'properties.remove'(propertyId) {
  	console.log(propertyId);
    check(propertyId, String);
    const property = Properties.findOne(propertyId);
    if (property.owner !== Meteor.userId()) {
      // If the task is private, make sure only the owner can delete it
      throw new Meteor.Error('not-authorized');
    }
    Properties.remove(propertyId);
  },
  'transactions.insert'(propertyID, transactionDate, description, vendor, amount, hasReceipt, receiptImage="") {
    check(propertyID,String);
    check(transactionDate,Date);
    check(description,String);
    check(vendor,String);
    check(amount,Number);
    check(hasReceipt,Boolean);
    check(receiptImage,String);
    // Make sure the user is logged in before inserting a task
    if (! Meteor.userId()) {
      throw new Meteor.Error('not-authorized');
    }
    const property = Properties.findOne(propertyID);
 
    // Make sure only the task owner can make a task private
    if (property.owner !== Meteor.userId()) {
      throw new Meteor.Error('not-authorized');
    }
    Properties.update(
      {_id:propertyID},
      {$push: 
        {
        transactions:
          {
            _transactionID: Random.id(),
            transactionDate: transactionDate,
            description: description,
            vendor: vendor,
            amount: amount,
            hasReceipt: hasReceipt,
            receiptImage: receiptImage,
            createdAt: new Date(),
            owner: Meteor.userId(),
            username: Meteor.user().username,
          }  
        }
      }
    );
  },
  'transactions.remove'(propertyID, transactionID) {
    check(propertyID, String);
    check(transactionID, String);
/*    const transaction = Properties.findOne(propertyID).transactions.find({_transactionID: transactionID});
*/    
    const property = Properties.findOne(propertyID);
    if (property.owner !== Meteor.userId()) {
      // If the task is private, make sure only the owner can delete it
      throw new Meteor.Error('not-authorized');
    }
    console.log(propertyID,transactionID);
    Properties.update(
      {_id:propertyID},
      {$pull: {transactions: {_transactionID: transactionID}}}
    );
  },
/*  'properties.setChecked'(propertyId, setChecked) {
    check(taskId, String);
    check(setChecked, Boolean);

    const task = Properties.findOne(taskId);
    if (task.private && task.owner !== Meteor.userId()) {
      // If the task is private, make sure only the owner can check it off
      throw new Meteor.Error('not-authorized');
    }
 
    Properties.update(taskId, { $set: { checked: setChecked } });
  },
  'properties.setPrivate'(taskId, setToPrivate) {
    check(taskId, String);
    check(setToPrivate, Boolean);
 
    const task = Properties.findOne(taskId);
 
    // Make sure only the task owner can make a task private
    if (task.owner !== Meteor.userId()) {
      throw new Meteor.Error('not-authorized');
    }
 
    Properties.update(taskId, { $set: { private: setToPrivate } });
  },*/
});